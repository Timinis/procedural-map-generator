{"version":3,"sources":["logo.svg","library/mapGeneration.ts","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","createNode","value","next","enqueue","queue","first","last","dequeue","deQue","createBinaryTree","map","left","right","getRandomPercentageInclusive","min","max","Math","ceil","floor","random","getRandomIntInclusive","generateNewMap","width","height","xAxis","yAxis","verticalSplit","mapToBeDivided","dividedLength","Object","toConsumableArray","horizontalSplit","getLeaf","wholeTree","returnedArray","treeTraversal","treeNode","push","mapRandomizerBreadth","wholeMap","numberOfSlices","counter","tree","switchSlice","expoCounter","currentNode","pow","splitMap","placeRoom","mapArea","returnArea","forEach","element","xNumber1","xNumber2","yNumber1","roomArea","concat","connectRoom","randomChosenPoints","tunnelArray","pointX","pointY","i","length","firstPointX","secondPointX","hTunnelY","hTunnelRange","sort","a","b","HTunnelCordinates","tunnelRange","yCordinates","firstPointY","secondPointY","vTunnelX","VTunnelCordinates","xCordinates","hTunnel","vTunnel","console","log","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","myRef","current","randomizedMap","canvasContext","getContext","easyMap","MapFactory","randomCutCounts","mapToBeDrawn","rooms","fillStyle","fillRect","state","React","createRef","window","innerWidth","innerHeight","react_default","createElement","id","ref","toString","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28721596.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","interface customMap {\n  xAxis: number[];\n  yAxis: number[];\n}\n\ninterface QueNode {\n  value: any;\n  next: QueNode | null;\n}\n\ninterface Queue {\n  first: QueNode | null;\n  last: QueNode | null;\n}\n\ninterface BinaryPartitionTree {\n  value: customMap;\n  left: BinaryPartitionTree | null;\n  right: BinaryPartitionTree | null;\n}\n\ninterface Tunnel {\n  hTunnel: HTunnelCordinates;\n\n  vTunnel: VTunnelCordinates;\n}\n\ninterface HTunnelCordinates {\n  tunnelRange: number[];\n  yCordinates: number;\n}\n\ninterface VTunnelCordinates {\n  tunnelRange: number[];\n  xCordinates: number;\n}\n\nconst createNode = (value: any): QueNode => {\n  return { value, next: null };\n};\n\nconst createQue = (): Queue => {\n  return { first: null, last: null };\n};\n\nconst enqueue = (queue: Queue, value: any): Queue => {\n  if (!queue.first && !queue.last) {\n    queue.first = createNode(value);\n    queue.last = queue.first;\n  } else if (queue.first && queue.last) {\n    queue.last.next = createNode(value);\n    queue.last = queue.last.next;\n  }\n  return queue;\n};\n\nconst dequeue = (queue: Queue): any => {\n  if (queue.first && queue.first !== queue.last) {\n    let deQue = queue.first;\n    queue.first = queue.first.next;\n    deQue.next = null;\n    return deQue;\n  } else if (queue.first && queue.first === queue.last) {\n    let deQue = queue.first;\n    queue.first = null;\n    queue.last = null;\n    return deQue;\n  } else if (queue.first === null) {\n    return 'Null Exception Error';\n  }\n};\n\nconst createBinaryTree = (map: customMap): BinaryPartitionTree => {\n  return { value: map, left: null, right: null };\n};\n\nconst getRandomPercentageInclusive = (min: number, max: number): number => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return (Math.floor(Math.random() * (max - min) + 1) + min) / 100; //The maximum is inclusive and the minimum is inclusive\n};\n\nconst getRandomIntInclusive = (min: number, max: number): number => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + 1) + min; //The maximum is inclusive and the minimum is inclusive\n};\n\nconst generateNewMap = (width: number, height: number): customMap => {\n  return { xAxis: [0, width - 1], yAxis: [0, height - 1] };\n};\n\nconst verticalSplit = (mapToBeDivided: customMap): customMap[] => {\n  let dividedLength = Math.floor(\n    (mapToBeDivided.xAxis[1] - mapToBeDivided.xAxis[0] + 1) *\n      getRandomPercentageInclusive(35, 70)\n  );\n\n  return [\n    {\n      xAxis: [\n        mapToBeDivided.xAxis[0],\n        mapToBeDivided.xAxis[0] + dividedLength - 1\n      ],\n      yAxis: [...mapToBeDivided.yAxis]\n    },\n    {\n      xAxis: [dividedLength + mapToBeDivided.xAxis[0], mapToBeDivided.xAxis[1]],\n      yAxis: [...mapToBeDivided.yAxis]\n    }\n  ];\n};\n\nconst horizontalSplit = (mapToBeDivided: customMap): customMap[] => {\n  let dividedLength = Math.floor(\n    (mapToBeDivided.yAxis[1] - mapToBeDivided.yAxis[0] + 1) *\n      getRandomPercentageInclusive(35, 70)\n  );\n\n  return [\n    {\n      xAxis: [...mapToBeDivided.xAxis],\n      yAxis: [\n        mapToBeDivided.yAxis[0],\n        mapToBeDivided.yAxis[0] + dividedLength - 1\n      ]\n    },\n    {\n      xAxis: [...mapToBeDivided.xAxis],\n      yAxis: [dividedLength + mapToBeDivided.yAxis[0], mapToBeDivided.yAxis[1]]\n    }\n  ];\n};\n\nconst mapRandomizerDepth = (wholeMap: customMap, numberOfSlices: number) => {\n  let counter = 0;\n  //function to add new leaf onto the tree\n  const binaryMapDivision = (inputMap: customMap): BinaryPartitionTree => {\n    let newLeaf = createBinaryTree(inputMap);\n    if (counter < numberOfSlices) {\n      if (counter % 2 === 1) {\n        let verticalSplittedMap = verticalSplit(newLeaf.value);\n        counter++;\n        newLeaf.left = binaryMapDivision(verticalSplittedMap[0]);\n        newLeaf.right = binaryMapDivision(verticalSplittedMap[1]);\n      } else if (counter % 2 === 0) {\n        let horizontalSplittedMap = horizontalSplit(newLeaf.value);\n        counter++;\n        newLeaf.left = binaryMapDivision(horizontalSplittedMap[0]);\n        newLeaf.right = binaryMapDivision(horizontalSplittedMap[1]);\n      }\n    }\n    return newLeaf;\n  };\n  let newTree = binaryMapDivision(wholeMap);\n\n  return newTree;\n};\n\nconst getLeaf = (wholeTree: BinaryPartitionTree): customMap[] => {\n  let returnedArray: customMap[] = [];\n  const treeTraversal = (treeNode: BinaryPartitionTree | null) => {\n    if (!treeNode) {\n      return;\n    }\n\n    if (!treeNode.left && !treeNode.right) {\n      returnedArray.push(treeNode.value);\n    }\n    treeTraversal(treeNode.left);\n    treeTraversal(treeNode.right);\n  };\n  treeTraversal(wholeTree);\n  return returnedArray;\n};\n\nconst mapRandomizerBreadth = (\n  wholeMap: customMap,\n  numberOfSlices: number\n): BinaryPartitionTree => {\n  let counter = 0;\n  let tree = createBinaryTree(wholeMap);\n  let queue = createQue();\n  let switchSlice = false;\n  let expoCounter = 0;\n  enqueue(queue, tree);\n  while (counter < numberOfSlices) {\n    let currentNode;\n    counter++;\n    if (counter === Math.pow(2, expoCounter)) {\n      expoCounter++;\n      switchSlice = !switchSlice;\n    }\n    if (queue.first) {\n      currentNode = queue.first.value;\n    }\n    let splitMap;\n    if (switchSlice) {\n      splitMap = verticalSplit(currentNode.value);\n    } else {\n      splitMap = horizontalSplit(currentNode.value);\n    }\n\n    currentNode.left = createBinaryTree(splitMap[0]);\n    enqueue(queue, currentNode.left);\n    currentNode.right = createBinaryTree(splitMap[1]);\n    enqueue(queue, currentNode.right);\n    dequeue(queue);\n  }\n  return tree;\n};\n\nconst placeRoom = (mapArea: customMap[]): customMap[] => {\n  let returnArea: customMap[] = [];\n  mapArea.forEach(element => {\n    let xNumber1 = getRandomIntInclusive(\n      element.xAxis[0],\n      Math.floor((element.xAxis[1] - element.xAxis[0]) / 2) + element.xAxis[0]\n    );\n    let xNumber2 = getRandomIntInclusive(xNumber1 + 3, element.xAxis[1] - 1);\n    let yNumber1 = getRandomIntInclusive(\n      element.yAxis[0],\n      Math.floor((element.yAxis[1] - element.yAxis[0]) / 2) + element.yAxis[0]\n    );\n    let yNumber2 = getRandomIntInclusive(yNumber1 + 3, element.yAxis[1] - 1);\n\n    let roomArea = { xAxis: [xNumber1, xNumber2], yAxis: [yNumber1, yNumber2] };\n\n    returnArea = [...returnArea, ...[roomArea]];\n  });\n  return returnArea;\n};\n\nconst connectRoom = (roomArea: customMap[]): Tunnel[] => {\n  let randomChosenPoints: any = [];\n  let tunnelArray: Tunnel[] = [];\n\n  roomArea.forEach(element => {\n    let pointX = getRandomIntInclusive(element.xAxis[0], element.xAxis[1] - 1);\n    let pointY = getRandomIntInclusive(element.yAxis[0], element.yAxis[1] - 1);\n    randomChosenPoints = [...randomChosenPoints, [pointX, pointY]];\n  });\n\n  for (let i = 0; i < randomChosenPoints.length - 1; i++) {\n    let firstPointX = randomChosenPoints[i][0];\n    let secondPointX = randomChosenPoints[i + 1][0];\n    let hTunnelY = randomChosenPoints[i][1];\n    let hTunnelRange = [firstPointX, secondPointX];\n    hTunnelRange.sort(function(a, b) {\n      return a - b;\n    });\n    let HTunnelCordinates: HTunnelCordinates = {\n      tunnelRange: hTunnelRange,\n      yCordinates: hTunnelY\n    };\n\n    let firstPointY = randomChosenPoints[i][1];\n    let secondPointY = randomChosenPoints[i + 1][1];\n    let vTunnelX = randomChosenPoints[i + 1][0];\n    let vTunnelRange = [firstPointY, secondPointY];\n    vTunnelRange.sort(function(a, b) {\n      return a - b;\n    });\n    let VTunnelCordinates: VTunnelCordinates = {\n      tunnelRange: [firstPointY, secondPointY],\n      xCordinates: vTunnelX\n    };\n    tunnelArray = [\n      ...tunnelArray,\n      { hTunnel: HTunnelCordinates, vTunnel: VTunnelCordinates }\n    ];\n  }\n  console.log(tunnelArray);\n  return tunnelArray;\n};\n\nexport {\n  generateNewMap,\n  mapRandomizerDepth,\n  mapRandomizerBreadth,\n  getLeaf,\n  getRandomIntInclusive,\n  placeRoom,\n  connectRoom\n};\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as MapFactory from './library/mapGeneration.ts';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount = () => {\n    if (this.myRef.current === null) return;\n    let canvasContext = this.myRef.current.getContext('2d');\n    let mapWidth = 50;\n    let mapHeight = 30;\n    let easyMap = MapFactory.generateNewMap(mapWidth, mapHeight);\n\n    let randomizedMap;\n\n    let randomCutCounts = MapFactory.getRandomIntInclusive(5, 9);\n    randomizedMap = MapFactory.mapRandomizerBreadth(easyMap, randomCutCounts);\n\n    let mapToBeDrawn = MapFactory.getLeaf(randomizedMap);\n\n    // canvasContext.fillStyle = 'gray';\n    // canvasContext.fillRect(20, 20, mapWidth * 20.5, mapHeight * 20.5);\n    // mapToBeDrawn.forEach(element => {\n    //   canvasContext.fillStyle = 'yellow';\n    //   canvasContext.fillRect(\n    //     20 * (element.xAxis[0] + 1) + 20,\n    //     20 * (element.yAxis[0] + 1) + 20,\n    //     (element.xAxis[1] - element.xAxis[0]) * 20,\n    //     (element.yAxis[1] - element.yAxis[0]) * 20\n    //   );\n    // });\n    let rooms = MapFactory.placeRoom(mapToBeDrawn);\n    rooms.forEach(element => {\n      canvasContext.fillStyle = 'green';\n      canvasContext.fillRect(\n        20 * (element.xAxis[0] + 1) + 20,\n        20 * (element.yAxis[0] + 1) + 20,\n        (element.xAxis[1] - element.xAxis[0]) * 20,\n        (element.yAxis[1] - element.yAxis[0]) * 20\n      );\n    });\n\n    let tunnels = MapFactory.connectRoom(rooms);\n    tunnels.forEach(element => {\n      canvasContext.fillStyle = 'green';\n      canvasContext.fillRect(\n        20 * (element.hTunnel.tunnelRange[0] + 1) + 20,\n        20 * (element.hTunnel.yCordinates + 1) + 20,\n        (element.hTunnel.tunnelRange[1] - element.hTunnel.tunnelRange[0] + 1) *\n          20,\n        20\n      );\n      canvasContext.fillStyle = 'green';\n      canvasContext.fillRect(\n        20 * (element.vTunnel.xCordinates + 1) + 20,\n        20 * (element.vTunnel.tunnelRange[0] + 1) + 20,\n        20,\n        (element.vTunnel.tunnelRange[1] - element.vTunnel.tunnelRange[0] + 1) *\n          20\n      );\n    });\n  };\n\n  render() {\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    return (\n      <div>\n        <canvas\n          id=\"procedural-map\"\n          ref={this.myRef}\n          width={width.toString()}\n          height={height.toString()}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}